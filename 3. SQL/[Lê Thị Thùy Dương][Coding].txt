CREATE SCHEMA `test`;
CREATE TABLE `test`.`all_events` (`version` TINYTEXT NULL,`country` TINYTEXT NULL,
                                  `user_pseudo_id` TINYTEXT NULL,`event_name` TINYTEXT NULL,
                                  `event_date` DATE NULL,`event_timestamp` BIGINT(20) NULL);
CREATE TABLE `test`.`session_start` (`version` TINYTEXT NULL,`user_pseudo_id` TINYTEXT NULL,
                                     `operating_system` TINYTEXT NULL,`mobile_brand_name` TINYTEXT NULL,
                                     `country` TINYTEXT NULL,`event_date` DATE NULL,`install_date` DATE NULL);
#Import data from csv files using Table Data Import Wizard

#Question1: Calculate DAU/WAU, DAU/MAU
CREATE TABLE `test`.`dau` (`event_date` DATE NULL,`daily_users` INT NULL);
CREATE TABLE `test`.`mau` (`event_date` DATE NULL,`monthly_users` INT NULL);
CREATE TABLE `test`.`wau` (`event_date` DATE NULL,`weekly_users` INT NULL);
INSERT INTO test.dau
SELECT 
      event_date,
      COUNT(DISTINCT user_pseudo_id)
FROM test.session_start
GROUP BY event_date;
INSERT INTO test.wau
SELECT 
      D.event_date AS 'event_date',
      COUNT(DISTINCT S.user_pseudo_id) AS 'weekly_users'
FROM test.session_start S, test.dau D
WHERE S.event_date BETWEEN (D.event_date - INTERVAL 7 DAY) AND D.event_date
GROUP BY D.event_date;
INSERT INTO test.mau
SELECT 
      D.event_date AS 'event_date',
      COUNT(DISTINCT S.user_pseudo_id) AS 'monthly_users'
FROM test.session_start S, test.dau D
WHERE S.event_date BETWEEN (D.event_date - INTERVAL 1 MONTH) AND D.event_date
GROUP BY D.event_date;
SELECT 
      D.event_date, 
      D.daily_users/W.weekly_users*100 AS 'DAU_WAU',
      D.daily_users/M.monthly_users*100 AS 'DAU_MAU'
FROM test.dau D
JOIN test.wau W ON D.event_date = W.event_date
JOIN test.mau M ON D.event_date = M.event_date;

#Question2: Find 3 preceding event before removing app
CREATE TABLE `test`.`app_remove` (`version` TINYTEXT NULL,`country` TINYTEXT NULL,`user_pseudo_id` TINYTEXT NULL,
				  `event_name` TINYTEXT NULL,`event_date` DATE NULL,`event_timestamp` BIGINT(20) NULL);
INSERT INTO test.app_remove
SELECT * FROM test.all_events WHERE event_name = 'app_remove' ORDER BY user_pseudo_id ASC;
CREATE TABLE `test`.`preceding_events` (`user_pseudo_id` TINYTEXT NULL,`event_name` TINYTEXT NULL,`event_rank` BIGINT(20) NULL);
INSERT INTO test.preceding_events
SELECT user_pseudo_id, event_name, event_rank
FROM
    (SELECT user_pseudo_id, event_name, event_timestamp , 
            @event_rank := IF(@current_id = user_pseudo_id, @event_rank + 1, 1) AS event_rank,
            @current_id := user_pseudo_id
     FROM test.all_events
     ORDER BY user_pseudo_id ASC, event_timestamp DESC) ranked
WHERE event_rank BETWEEN 2 AND 4;
CREATE TABLE `test`.`preceding_events2` (`user_pseudo_id` TINYTEXT NULL,`preceding_event_name1` TINYTEXT NULL,
					 `preceding_event_name2` TINYTEXT NULL,`preceding_event_name3` TINYTEXT NULL);
INSERT INTO test.preceding_events2
SELECT user_pseudo_id,
         max(case when (event_rank=2) then event_name else NULL end) as 'preceding_event_name1',
         max(case when (event_rank=3) then event_name else NULL end) as 'preceding_event_name2',
         max(case when (event_rank=4) then event_name else NULL end) as 'preceding_event_name3'
         from test.preceding_events
         group by user_pseudo_id
         order by user_pseudo_id;
SELECT  t1. version, t1.country, t1. user_pseudo_id, t1.event_name, t1.event_timestamp,
        t2.preceding_event_name1, t2.preceding_event_name2, t2.preceding_event_name3
FROM test.app_remove t1
JOIN test.preceding_events2 t2 ON t1.user_pseudo_id = t2.user_pseudo_id;
